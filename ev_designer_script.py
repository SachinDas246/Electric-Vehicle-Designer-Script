# -*- coding: utf-8 -*-
"""EV Designer Script

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UTv94fMMKu0cdnbi8fbHHlNgJ3YXLsNN

Ev Designer Script

This is a python script that can be used for faster designing of electric vehicle especially in case of four wheelers.

If you are having doubt about any parameters please check in the readme file :

Converter Functicons :(these are functions for easier conversion [no need of any updates in this block ])
"""

import math
def Rpm_to_mpers(rpm,radius):
  return rpm*radius*0.104719755

def mpstokmh(mps):
  return mps*3.6
def kmhtomps(kmh):
  return kmh/3.6

"""Vehicle Datas

Input the vehicle datas below  `in the mentioned units`
"""

Acceleration =  3 #m/s^2
Design_Speed=kmhtomps(150) #km/h
Total_Mass_of_Vehicle = 1000 #Kg

Radius_Of_Wheel=0.203 #Meter(radius not diameter)

Coefficient_of_rolling_resistance= 0.1 #Cr

Drag_Coefficient = 1.5 #Cd    
Front_Area_of_Vehicle = 3 #m^2
Air_Density = 1.2  #kg/m^3  

Maximum_Climbing_Angle = 0 #Degree


Force_of_Acceleration = Acceleration*Total_Mass_of_Vehicle
print("Force_of_Acceleration = "+str(Force_of_weight))

Force_of_Rolling_Resistance = Coefficient_of_rolling_resistance * 9.80665 * Total_Mass_of_Vehicle
print("Force_of_Rolling_Resistance = "+str(Force_of_Rolling_Resistance))

Force_of_Aerodynamic_Drag = Drag_Coefficient*Air_Density*Design_Speed*Design_Speed*Front_Area_of_Vehicle*0.5
print("Force_of_Aerodynamic_Drag = "+str(Force_of_Aerodynamic_Drag))

Force_of_Climbing =  math.cos(math.radians(90 - Maximum_Climbing_Angle)) * 9.80665 * Total_Mass_of_Vehicle
print("Force_of_Climbing = "+str(Force_of_Climbing))

Force=Force_of_Acceleration+Force_of_Rolling_Resistance+Force_of_Aerodynamic_Drag+Force_of_Climbing
Torque=Force*Radius_Of_Wheel 
print()
print("Total Force = "+str(Force)+ " Newton")
print("Torque = "+str(Torque)+ " Newton meter")

"""Motor Parameters

Details of the motor you choose. `Try tuning these parameters for selecting the motor`
"""

Motor_Torque = 234.5565 #Newton Meter
Motor_Rpm = 8000 #RPM
Motor_KW  = 35  # KW
Motor_Voltage = 125 #V

Gear_Ratio = Torque/Motor_Torque
Vehicle_Speed= Rpm_to_mpers(Motor_Rpm/Gear_Ratio,Radius_Of_Wheel)

print("Gear Ratio = "+str(Gear_Ratio))
print("Vehicle Speed = "+str(mpstokmh(Vehicle_Speed))+" Km/h")

"""Conditions

These are the conditions that the vehicle should obey to pass certain test.
"""

Distance=300000 #Meter
Additional_time=0 #seconds

if Vehicle_Speed>Design_Speed :
  Vehicle_Speed=Design_Speed

time_required = Distance/Vehicle_Speed
total_time=time_required+Additional_time
kWh=Motor_KW*(total_time/3600)

print("Time Required = "+str(time_required/3600)+" hours")
print("Total time = "+ str(total_time/3600)+" hours")
print("kWh = "+str(kWh)+" kWh")

"""Battery Calculation"""

Ah_of_Each_cell=3.5 #Ah
Voltage_of_Each_Cell=3.7 #V
Useable_Percentage= 0.5 #percent(here50)

No_of_Cells_in_one_String = math.ceil(Motor_Voltage/Voltage_of_Each_Cell)

no_of_Strings = math.ceil(( (kWh*1000)*(1/Useable_Percentage) )/(Motor_Voltage*Ah_of_Each_cell))

total_No_of_Cells=no_of_Strings*No_of_Cells_in_one_String

print("No of cells in each Strings = "+str(No_of_Cells_in_one_String))
print("No of Strings = "+str(no_of_Strings))
print("Total no of Cells ="+str(total_No_of_Cells))